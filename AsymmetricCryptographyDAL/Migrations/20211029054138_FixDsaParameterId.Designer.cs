// <auto-generated />
using AsymmetricCryptographyDAL.EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AsymmetricCryptographyDAL.Migrations
{
    [DbContext(typeof(KeyContext))]
    [Migration("20211029054138_FixDsaParameterId")]
    partial class FixDsaParameterId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlgorithmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BinarySize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaDomainParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlgorithmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BinarySize")
                        .HasColumnType("int");

                    b.Property<string>("G")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("P")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DsaDomainParameters");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaPrivateKey", b =>
                {
                    b.HasBaseType("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey");

                    b.Property<int>("DomainParameterId")
                        .HasColumnType("int");

                    b.Property<string>("X")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DomainParameterId");

                    b.ToTable("DsaPrivateKeys");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaPublicKey", b =>
                {
                    b.HasBaseType("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey");

                    b.Property<int>("DomainParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Y")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DomainParameterId");

                    b.ToTable("DsaPublicKeys");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.RSA.RsaPrivateKey", b =>
                {
                    b.HasBaseType("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey");

                    b.Property<string>("Modulus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateExponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RsaPrivateKeys");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.RSA.RsaPublicKey", b =>
                {
                    b.HasBaseType("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey");

                    b.Property<string>("Modulus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicExponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RsaPublicKeys");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaPrivateKey", b =>
                {
                    b.HasOne("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaDomainParameter", "DomainParameter")
                        .WithMany("PrivateKeys")
                        .HasForeignKey("DomainParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey", null)
                        .WithOne()
                        .HasForeignKey("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaPrivateKey", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("DomainParameter");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaPublicKey", b =>
                {
                    b.HasOne("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaDomainParameter", "DomainParameter")
                        .WithMany("PublicKeys")
                        .HasForeignKey("DomainParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey", null)
                        .WithOne()
                        .HasForeignKey("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaPublicKey", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("DomainParameter");
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.RSA.RsaPrivateKey", b =>
                {
                    b.HasOne("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey", null)
                        .WithOne()
                        .HasForeignKey("AsymmetricCryptographyDAL.Entities.Keys.RSA.RsaPrivateKey", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.RSA.RsaPublicKey", b =>
                {
                    b.HasOne("AsymmetricCryptographyDAL.Entities.Keys.AsymmetricKey", null)
                        .WithOne()
                        .HasForeignKey("AsymmetricCryptographyDAL.Entities.Keys.RSA.RsaPublicKey", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsymmetricCryptographyDAL.Entities.Keys.DSA.DsaDomainParameter", b =>
                {
                    b.Navigation("PrivateKeys");

                    b.Navigation("PublicKeys");
                });
#pragma warning restore 612, 618
        }
    }
}

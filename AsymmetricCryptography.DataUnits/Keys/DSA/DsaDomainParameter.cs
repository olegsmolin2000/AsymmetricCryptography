namespace AsymmetricCryptography.DataUnits.Keys.DSA
{
    /// <summary>
    /// Dsa domain parameter data unit (Q,P,G), let generate DSA keys by parameter values
    /// </summary>
    public sealed class DsaDomainParameter : AsymmetricKey
    {
        /// <summary>
        /// Prime number Q, BinarySize(Q) == HashAlgorithm.DigestBitLength
        /// </summary>
        public BigInteger Q { get; init; }

        /// <summary>
        /// Prime number P, (P - 1) % Q == 0
        /// </summary>
        public BigInteger P { get; init; }

        /// <summary>
        /// G = h^((P - 1) / Q) mod P, h = random
        /// </summary>
        public BigInteger G { get; init; }

        /// <summary>
        /// Collection of DSA private keys generated by this domain parameter
        /// </summary>
        public ICollection<DsaPrivateKey> PrivateKeys { get; set; }

        /// <summary>
        /// Collection of DSA public keys generated by this domain parameter
        /// </summary>
        public ICollection<DsaPublicKey> PublicKeys { get; set; }

        /// <summary>
        /// Initializes new instance of DSA domain parameter with a specified values
        /// </summary>
        /// <param name="binarySize">Binary size used in keys generating</param>
        /// <param name="q">Prime number Q, BinarySize(Q) == HashAlgorithm.DigestBitLength</param>
        /// <param name="p">Prime number P, (P - 1) % Q == 0</param>
        /// <param name="g">G = h^((P - 1) / Q) mod P, h = random</param>
        public DsaDomainParameter(int binarySize, BigInteger q, BigInteger p, BigInteger g)
            : base(binarySize, AlgorithmName.DSA, KeyType.DomainParameter)
        {
            Q = q;
            P = p;
            G = g;
        }

        public override void Accept(IKeyVisitor keyVisitor)
        {
            keyVisitor.VisitDsaDomainParameters(this);
        }
    }
}
